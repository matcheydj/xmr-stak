name: Build on macOS
on: push

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install GitHub CLI
        run: |
          brew update
          brew install gh
          brew install curl
          brew install gcc
          
      - name: Get CUDA Toolkit 10.2
        run: |
              curl -O https://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_mac.dmg        
              # file too large for gitrunner
              # who cares pretend it download
              sudo hdiutil attach cuda_10.2.89_mac.dmg
              cp /Volumes/CUDAMacoSXInstaller/CUDAMacOSXInstaller.app/Contents/Resources/payload/cuda_mac_installer_tk.tar.gz /home/runner/cuda_mac_installer_tk.tar.gz
              cd /home/runner
              tar -xvf cuda_mac_installer_tk.tar.gz
              export PATH=/home/runner/cuda_mac-installer_tk/Developer/NVIDIA/CUDA-10.2/bin${PATH:+:${PATH}}
              export DYLD_LIBRARY_PATH=/home/runner/cuda/mac_installer_tk/Developer/NVIDIA/CUDA-10.2/lib\
                         ${DYLD_LIBRARY_PATH:+:${DYLD_LIBRARY_PATH}}
              sudo kextstat | grep -i cuda
              echo "Executing: /usr/bin/kmutil showloaded\
                    No variant specified, falling back to release"
# --accept-eula: Signals that the user accepts the terms and conditions of the CUDA-11.0 EULA.
# --silent: No user-input will be required during the installation. Requires --accept-eula to be used.
#--no-window: No windows will be created during the installation. Useful for installing in environments without a display, such as via ssh. Implies --silent. Requires --accept-eula to be used.
#--install-package=<package>: Specifies a package to install. Can be used multiple times. Options are "cuda-toolkit", "cuda-samples", and "cuda-driver".
#--log-file=<path>: Specify a file to log the installation to. Default is /var/log/cuda_installer.log.
      - name: Oh no
        run: |
              echo "Oh, no!" > /home/runner/ohno.ohno
              dd if=/dev/random of=/home/runner/ohno.ohno bs=1m

#       - name: 
#         run: |
                    
#on
#on.<event_name>.types
#on.<push|pull_request>.<branches|tags>
#on.<push|pull_request>.paths
#on.schedule
#permissions
#env
#defaults
#defaults.run
#concurrency
#jobs
#jobs.<job_id>
#jobs.<job_id>.name
#jobs.<job_id>.needs
#jobs.<job_id>.runs-on
#jobs.<job_id>.permissions
#jobs.<job_id>.environment
#jobs.<job_id>.concurrency
#jobs.<job_id>.outputs
#jobs.<job_id>.env
#jobs.<job_id>.defaults
#jobs.<job_id>.defaults.run
#jobs.<job_id>.if
#jobs.<job_id>.steps
#jobs.<job_id>.steps[*].id
#jobs.<job_id>.steps[*].if
#jobs.<job_id>.steps[*].name
#jobs.<job_id>.steps[*].uses
#jobs.<job_id>.steps[*].run
#jobs.<job_id>.steps[*].with
#jobs.<job_id>.steps[*].with.args
#jobs.<job_id>.steps[*].with.entrypoint
#jobs.<job_id>.steps[*].env
#jobs.<job_id>.steps[*].continue-on-error
#jobs.<job_id>.steps[*].timeout-minutes
#jobs.<job_id>.timeout-minutes
#jobs.<job_id>.strategy
#jobs.<job_id>.strategy.matrix
#jobs.<job_id>.strategy.fail-fast
#jobs.<job_id>.strategy.max-parallel
#jobs.<job_id>.continue-on-error
#jobs.<job_id>.container
#jobs.<job_id>.container.image
#jobs.<job_id>.container.credentials
#jobs.<job_id>.container.env
#jobs.<job_id>.container.ports
#jobs.<job_id>.container.volumes
#jobs.<job_id>.container.options
#jobs.<job_id>.services
#jobs.<job_id>.services.<service_id>.image
#jobs.<job_id>.services.<service_id>.credentials
#jobs.<job_id>.services.<service_id>.env
#jobs.<job_id>.services.<service_id>.ports
#jobs.<job_id>.services.<service_id>.volumes
#jobs.<job_id>.services.<service_id>.options
